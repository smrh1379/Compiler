// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/sbu/compiler/project/phase2/phase2/src/scanner.flex

import HtmlHighlighter.HtmlHighlighter;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements Lexical {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\0"+
    "\1\24\1\25\1\26\1\27\2\0\4\30\1\31\3\30"+
    "\1\32\11\30\1\33\4\30\1\34\2\30\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\30\1\53\1\54"+
    "\1\30\1\55\1\56\1\57\1\30\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\34\2\30\1\66\1\67\1\70"+
    "\7\0\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\3\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\71";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\1"+
    "\1\27\1\30\15\25\1\31\1\32\1\33\1\34\1\35"+
    "\1\34\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\0\1\46\1\47\1\50\3\0\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\10\25"+
    "\1\62\1\63\12\25\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\2\0\1\46\1\20\1\0\1\73\6\25"+
    "\1\74\2\25\1\75\1\76\1\77\1\25\1\100\11\25"+
    "\1\0\1\101\3\25\1\102\1\25\1\103\1\25\1\104"+
    "\2\25\1\105\3\25\1\106\1\107\1\25\1\110\1\111"+
    "\1\25\1\112\1\25\1\113\1\114\3\25\1\115\3\25"+
    "\1\116\1\117\1\120\3\25\1\121\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\256\0\256\0\350\0\256"+
    "\0\256\0\u0122\0\256\0\256\0\u015c\0\u0196\0\256\0\u01d0"+
    "\0\256\0\u020a\0\u0244\0\u027e\0\256\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\256\0\u03a0\0\256\0\256\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\256\0\u06cc\0\256\0\256\0\256\0\u0706"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\u0740\0\u077a\0\256\0\u07b4\0\u07ee\0\u0828\0\u0862\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32"+
    "\0\u0366\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\u0cea\0\u0d24\0\256\0\u0828\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0366"+
    "\0\u0f2e\0\u0f68\0\u0366\0\u0366\0\u0366\0\u0fa2\0\u0366\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u0366\0\u1220\0\u125a\0\u1294\0\u0366\0\u12ce\0\u0366"+
    "\0\u1308\0\u0366\0\u1342\0\u137c\0\u0366\0\u13b6\0\u13f0\0\u142a"+
    "\0\u0366\0\u0366\0\u1464\0\u0366\0\u0366\0\u149e\0\u0366\0\u14d8"+
    "\0\u0366\0\u0366\0\u1512\0\u154c\0\u1586\0\u0366\0\u15c0\0\u15fa"+
    "\0\u1634\0\u0366\0\u0366\0\u0366\0\u166e\0\u16a8\0\u16e2\0\u0366"+
    "\0\u0366\0\u0366";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\5\1\7\1\10\1\11\1\12"+
    "\1\4\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\5\31"+
    "\1\32\1\33\1\34\1\35\1\4\1\31\1\36\1\37"+
    "\1\31\1\40\1\41\2\31\1\42\1\31\1\43\1\44"+
    "\1\31\1\45\1\46\1\47\1\50\1\31\1\51\1\52"+
    "\1\53\1\54\1\55\1\4\2\56\3\4\1\56\1\57"+
    "\27\56\1\60\32\56\12\4\1\61\60\4\120\0\1\62"+
    "\53\0\1\63\107\0\1\64\60\0\1\65\10\0\1\66"+
    "\62\0\1\67\6\0\1\70\57\0\1\71\4\0\1\72"+
    "\4\0\1\73\63\0\1\74\1\0\2\75\10\0\1\76"+
    "\32\0\1\76\22\0\1\74\1\0\2\24\5\0\1\77"+
    "\14\0\1\77\51\0\1\100\71\0\1\101\71\0\1\102"+
    "\65\0\2\31\4\0\5\31\4\0\25\31\12\0\1\103"+
    "\2\0\1\104\24\0\1\105\16\0\1\106\2\0\1\107"+
    "\1\0\1\110\31\0\2\31\4\0\5\31\4\0\15\31"+
    "\1\111\1\31\1\112\5\31\26\0\2\31\4\0\5\31"+
    "\4\0\13\31\1\113\1\31\1\114\7\31\26\0\2\31"+
    "\4\0\5\31\4\0\13\31\1\115\11\31\26\0\2\31"+
    "\4\0\5\31\4\0\1\31\1\116\13\31\1\117\4\31"+
    "\1\120\2\31\26\0\2\31\4\0\5\31\4\0\6\31"+
    "\1\121\5\31\1\122\10\31\26\0\2\31\4\0\5\31"+
    "\4\0\5\31\1\123\7\31\1\124\7\31\26\0\2\31"+
    "\4\0\5\31\4\0\5\31\1\125\17\31\26\0\2\31"+
    "\4\0\5\31\4\0\17\31\1\126\5\31\26\0\2\31"+
    "\4\0\5\31\4\0\1\31\1\127\3\31\1\130\17\31"+
    "\26\0\2\31\4\0\5\31\4\0\21\31\1\131\3\31"+
    "\26\0\2\31\4\0\5\31\4\0\17\31\1\132\5\31"+
    "\26\0\2\31\4\0\5\31\4\0\15\31\1\133\7\31"+
    "\26\0\2\31\4\0\5\31\4\0\10\31\1\134\14\31"+
    "\73\0\1\135\10\0\1\136\2\0\1\137\24\0\1\140"+
    "\16\0\1\141\2\0\1\142\1\0\1\143\7\0\14\144"+
    "\1\145\55\144\2\72\1\146\1\72\1\146\65\72\22\0"+
    "\2\74\5\0\1\77\14\0\1\77\43\0\1\74\1\0"+
    "\2\75\70\0\2\147\4\0\5\147\5\0\24\147\21\0"+
    "\1\150\1\0\1\150\3\0\1\151\43\0\1\150\24\0"+
    "\2\31\4\0\5\31\4\0\15\31\1\152\7\31\26\0"+
    "\2\31\4\0\5\31\4\0\5\31\1\153\17\31\26\0"+
    "\2\31\4\0\5\31\4\0\1\31\1\154\23\31\26\0"+
    "\2\31\4\0\5\31\4\0\14\31\1\155\10\31\26\0"+
    "\2\31\4\0\5\31\4\0\20\31\1\156\4\31\26\0"+
    "\2\31\4\0\5\31\4\0\13\31\1\157\11\31\26\0"+
    "\2\31\4\0\5\31\4\0\17\31\1\160\5\31\26\0"+
    "\2\31\4\0\5\31\4\0\14\31\1\161\10\31\26\0"+
    "\2\31\4\0\5\31\4\0\16\31\1\162\2\31\1\163"+
    "\3\31\26\0\2\31\4\0\5\31\4\0\14\31\1\164"+
    "\4\31\1\165\3\31\26\0\2\31\4\0\5\31\4\0"+
    "\15\31\1\166\7\31\26\0\2\31\4\0\5\31\4\0"+
    "\24\31\1\167\26\0\2\31\4\0\5\31\4\0\11\31"+
    "\1\170\13\31\26\0\2\31\4\0\5\31\4\0\14\31"+
    "\1\171\10\31\26\0\2\31\4\0\5\31\4\0\1\31"+
    "\1\172\17\31\1\173\3\31\26\0\2\31\4\0\5\31"+
    "\4\0\1\31\1\174\15\31\1\175\5\31\26\0\2\31"+
    "\4\0\5\31\4\0\22\31\1\176\2\31\26\0\2\31"+
    "\4\0\5\31\4\0\11\31\1\177\13\31\26\0\2\31"+
    "\4\0\5\31\4\0\11\31\1\200\13\31\4\0\14\144"+
    "\1\201\55\144\14\0\1\145\4\0\1\146\73\0\1\151"+
    "\70\0\2\151\70\0\2\31\4\0\5\31\4\0\13\31"+
    "\1\202\11\31\26\0\2\31\4\0\5\31\4\0\1\31"+
    "\1\203\23\31\26\0\2\31\4\0\5\31\4\0\20\31"+
    "\1\204\4\31\26\0\2\31\4\0\5\31\4\0\21\31"+
    "\1\205\3\31\26\0\2\31\4\0\5\31\4\0\5\31"+
    "\1\206\17\31\26\0\2\31\4\0\5\31\4\0\20\31"+
    "\1\207\4\31\26\0\2\31\4\0\5\31\4\0\3\31"+
    "\1\210\21\31\26\0\2\31\4\0\5\31\4\0\22\31"+
    "\1\211\2\31\26\0\2\31\4\0\5\31\4\0\16\31"+
    "\1\212\6\31\26\0\2\31\4\0\5\31\4\0\14\31"+
    "\1\213\10\31\26\0\2\31\4\0\5\31\4\0\7\31"+
    "\1\214\15\31\26\0\2\31\4\0\5\31\4\0\13\31"+
    "\1\215\11\31\26\0\2\31\4\0\5\31\4\0\22\31"+
    "\1\216\2\31\26\0\2\31\4\0\5\31\4\0\21\31"+
    "\1\217\3\31\26\0\2\31\4\0\5\31\4\0\11\31"+
    "\1\220\13\31\26\0\2\31\4\0\5\31\4\0\5\31"+
    "\1\221\17\31\26\0\2\31\4\0\5\31\4\0\4\31"+
    "\1\222\20\31\26\0\2\31\4\0\5\31\4\0\13\31"+
    "\1\223\11\31\4\0\14\144\1\201\4\144\1\146\50\144"+
    "\22\0\2\31\4\0\5\31\4\0\12\31\1\224\12\31"+
    "\26\0\2\31\4\0\5\31\4\0\20\31\1\225\4\31"+
    "\26\0\2\31\4\0\5\31\4\0\11\31\1\226\13\31"+
    "\26\0\2\31\4\0\5\31\4\0\5\31\1\227\17\31"+
    "\26\0\2\31\4\0\5\31\4\0\21\31\1\230\3\31"+
    "\26\0\2\31\4\0\5\31\4\0\21\31\1\231\3\31"+
    "\26\0\2\31\4\0\5\31\4\0\5\31\1\232\17\31"+
    "\26\0\2\31\4\0\5\31\4\0\17\31\1\233\5\31"+
    "\26\0\2\31\4\0\5\31\4\0\11\31\1\234\13\31"+
    "\26\0\2\31\4\0\5\31\4\0\14\31\1\235\10\31"+
    "\26\0\2\31\4\0\5\31\4\0\5\31\1\236\17\31"+
    "\26\0\2\31\4\0\5\31\4\0\14\31\1\237\10\31"+
    "\26\0\2\31\4\0\2\31\1\240\1\241\1\31\4\0"+
    "\25\31\26\0\2\31\4\0\5\31\4\0\14\31\1\242"+
    "\10\31\26\0\2\31\4\0\5\31\4\0\3\31\1\243"+
    "\21\31\26\0\2\31\4\0\5\31\4\0\7\31\1\244"+
    "\15\31\26\0\2\31\4\0\5\31\4\0\22\31\1\245"+
    "\2\31\26\0\2\31\4\0\5\31\4\0\14\31\1\246"+
    "\10\31\26\0\2\31\4\0\5\31\4\0\21\31\1\247"+
    "\3\31\26\0\2\31\4\0\5\31\4\0\5\31\1\250"+
    "\17\31\26\0\2\31\4\0\5\31\4\0\21\31\1\251"+
    "\3\31\26\0\2\31\4\0\5\31\4\0\17\31\1\252"+
    "\5\31\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\1\1\2\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\4\1\1\11\1\1\2\11"+
    "\15\1\1\11\1\1\3\11\1\1\10\11\1\0\1\1"+
    "\1\11\1\1\3\0\11\11\24\1\7\11\2\0\1\11"+
    "\1\1\1\0\30\1\1\0\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
public int ICV=0;
public static HtmlHighlighter htmlHighlighter = new HtmlHighlighter();
  class Symbol {
  public String type;
	public String content;
	public int  yyline, yycolumn;
  	public Symbol( String tokenType, int yyline, int yycolumn, String content ) {
		this.content = content;
		this.type = tokenType;
		this.yyline = yyline;
		this.yycolumn = yycolumn;
	}
	}
    String string="";
    StringBuilder character;
    String STP="";
    public Symbol symbol(String type) {
		return new Symbol(type, yyline, yycolumn,"");
    }

    public Symbol symbol(String type, String value) {
    	return new Symbol(type, yyline, yycolumn, value);
    }

  public String nextToken(){
  try {
    Symbol current = next_token();
    return current == null ? "$" : current.type;
  }catch(Exception e){
    e.printStackTrace();
    return null;
  }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                htmlHighlighter.endFile();
return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { htmlHighlighter.undefinedToken(yytext());
            }
            // fall through
          case 84: break;
          case 2:
            { htmlHighlighter.space();
            }
            // fall through
          case 85: break;
          case 3:
            { htmlHighlighter.newLine(yyline+1);
            }
            // fall through
          case 86: break;
          case 4:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("NOT");
            }
            // fall through
          case 87: break;
          case 5:
            { yybegin(STRING); string = "" +yytext();
     STP=string;
            }
            // fall through
          case 88: break;
          case 6:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("MOD");
            }
            // fall through
          case 89: break;
          case 7:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("BITAND");
            }
            // fall through
          case 90: break;
          case 8:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("OPENPAREN");
            }
            // fall through
          case 91: break;
          case 9:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("CLOSPAREN");
            }
            // fall through
          case 92: break;
          case 10:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("PROD");
            }
            // fall through
          case 93: break;
          case 11:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("ADD");
            }
            // fall through
          case 94: break;
          case 12:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("COLON");
            }
            // fall through
          case 95: break;
          case 13:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("MINUS");
            }
            // fall through
          case 96: break;
          case 14:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("DOT");
            }
            // fall through
          case 97: break;
          case 15:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("DIV");
            }
            // fall through
          case 98: break;
          case 16:
            { htmlHighlighter.integerNumbers(yytext().toString());
                        return symbol("INTNUMBER",yytext());
            }
            // fall through
          case 99: break;
          case 17:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("SEMICOLON");
            }
            // fall through
          case 100: break;
          case 18:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("LESS");
            }
            // fall through
          case 101: break;
          case 19:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("ASSIGN");
            }
            // fall through
          case 102: break;
          case 20:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("GR");
            }
            // fall through
          case 103: break;
          case 21:
            { htmlHighlighter.Identifiers(yytext());
                      return symbol("ID",yytext());
            }
            // fall through
          case 104: break;
          case 22:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("OPENBRACES");
            }
            // fall through
          case 105: break;
          case 23:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("CLOSBRACES");
            }
            // fall through
          case 106: break;
          case 24:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("XOR");
            }
            // fall through
          case 107: break;
          case 25:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("OPENCURLY");
            }
            // fall through
          case 108: break;
          case 26:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("BITOR");
            }
            // fall through
          case 109: break;
          case 27:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("CLOSCURLY");
            }
            // fall through
          case 110: break;
          case 28:
            { string = string + yytext();
                STP= STP + yytext();
            }
            // fall through
          case 111: break;
          case 29:
            { STP = STP + yytext() ;
    htmlHighlighter.stringsAndCharacters (string+yytext());
		yybegin(YYINITIAL);
		return symbol("STRLITERAL", STP);
            }
            // fall through
          case 112: break;
          case 30:
            { htmlHighlighter.stringsAndCharacters(yytext());
    yybegin(YYINITIAL);
    return symbol("CHAR",yytext());
            }
            // fall through
          case 113: break;
          case 31:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("NOTEQ");
            }
            // fall through
          case 114: break;
          case 32:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("LOGAND");
            }
            // fall through
          case 115: break;
          case 33:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("PRODASS");
            }
            // fall through
          case 116: break;
          case 34:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("INC");
            }
            // fall through
          case 117: break;
          case 35:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("ADDASS");
            }
            // fall through
          case 118: break;
          case 36:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("DEC");
            }
            // fall through
          case 119: break;
          case 37:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("SUBASS");
            }
            // fall through
          case 120: break;
          case 38:
            { htmlHighlighter.comments(yytext());
                    return symbol("Comment");
            }
            // fall through
          case 121: break;
          case 39:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("DIVASS");
            }
            // fall through
          case 122: break;
          case 40:
            { htmlHighlighter.realNumbers(yytext().toString());
                    return symbol("REALNUMBER",yytext());
            }
            // fall through
          case 123: break;
          case 41:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("LESSEQ");
            }
            // fall through
          case 124: break;
          case 42:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("EQ");
            }
            // fall through
          case 125: break;
          case 43:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("GREQ");
            }
            // fall through
          case 126: break;
          case 44:
            { htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\\"" );
            }
            // fall through
          case 127: break;
          case 45:
            { htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\'" );
            }
            // fall through
          case 128: break;
          case 46:
            { htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\\\" );
            }
            // fall through
          case 129: break;
          case 47:
            { htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\n" );
            }
            // fall through
          case 130: break;
          case 48:
            { htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\r" );
            }
            // fall through
          case 131: break;
          case 49:
            { htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\t" );
            }
            // fall through
          case 132: break;
          case 50:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("IF");
            }
            // fall through
          case 133: break;
          case 51:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("IN");
            }
            // fall through
          case 134: break;
          case 52:
            { htmlHighlighter.operatorsAndPunctuations(yytext());
                    return symbol("LOGICOR");
            }
            // fall through
          case 135: break;
          case 53:
            { htmlHighlighter.stringsAndCharacters (string);
                string = "";
                  htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\\"" );
            }
            // fall through
          case 136: break;
          case 54:
            { htmlHighlighter.stringsAndCharacters (string);
                string = "";
                  htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\'" );
            }
            // fall through
          case 137: break;
          case 55:
            { htmlHighlighter.stringsAndCharacters (string);
                string = "";
                  htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\\\" );
            }
            // fall through
          case 138: break;
          case 56:
            { htmlHighlighter.stringsAndCharacters (string);
                string = "";
                  htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\n" );
            }
            // fall through
          case 139: break;
          case 57:
            { htmlHighlighter.stringsAndCharacters (string);
                string = "";
                  htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\r" );
            }
            // fall through
          case 140: break;
          case 58:
            { htmlHighlighter.stringsAndCharacters (string);
                string = "";
                  htmlHighlighter.specialCharacters(yytext());
                  return symbol("Special_CHAR", "\\t" );
            }
            // fall through
          case 141: break;
          case 59:
            { htmlHighlighter.realNumbers(yytext());
                        return symbol("SCIFLOAT",yytext());
            }
            // fall through
          case 142: break;
          case 60:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("FOR");
            }
            // fall through
          case 143: break;
          case 61:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("INT");
            }
            // fall through
          case 144: break;
          case 62:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("LEN");
            }
            // fall through
          case 145: break;
          case 63:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("LET");
            }
            // fall through
          case 146: break;
          case 64:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("NEW");
            }
            // fall through
          case 147: break;
          case 65:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("BOOL");
            }
            // fall through
          case 148: break;
          case 66:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("ELSE");
            }
            // fall through
          case 149: break;
          case 67:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("FUNC");
            }
            // fall through
          case 150: break;
          case 68:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("LOOP");
            }
            // fall through
          case 151: break;
          case 69:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("REAL");
            }
            // fall through
          case 152: break;
          case 70:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("TRUE");
            }
            // fall through
          case 153: break;
          case 71:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("VOID");
            }
            // fall through
          case 154: break;
          case 72:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("BREAK");
            }
            // fall through
          case 155: break;
          case 73:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("CLASS");
            }
            // fall through
          case 156: break;
          case 74:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("FALSE");
            }
            // fall through
          case 157: break;
          case 75:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("PRINT");
            }
            // fall through
          case 158: break;
          case 76:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("RANGE");
            }
            // fall through
          case 159: break;
          case 77:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("WHILE");
            }
            // fall through
          case 160: break;
          case 78:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("RETURN");
            }
            // fall through
          case 161: break;
          case 79:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("STATIC");
            }
            // fall through
          case 162: break;
          case 80:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("STRING");
            }
            // fall through
          case 163: break;
          case 81:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("CONTINUE");
            }
            // fall through
          case 164: break;
          case 82:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("INPUTINT");
            }
            // fall through
          case 165: break;
          case 83:
            { htmlHighlighter.reservedKeyWords(yytext());
                  return symbol("INPUTSTR");
            }
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
